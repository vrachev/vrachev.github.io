---
import BaseLayout from "@/src/layouts/BaseLayout.astro";
import "@/src/styles/global.css";
import { getEntry } from "astro:content";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const weeks = await getCollection("thisweek");
  return weeks.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

type Week = typeof Astro.props.entry;

async function getNeighborWeeks(week: Week, weeks: any[]) {
  // Sort weeks by startDate
  const sortedWeeks = weeks.sort((a, b) => new Date(a.data.startDate).getTime() - new Date(b.data.startDate).getTime());

  // Find the current week index
  const currentWeekIndex = sortedWeeks.findIndex(w => w.slug === week.slug);

  // Determine the previous and next week entries
  const prevWeek = currentWeekIndex > 0 ? sortedWeeks[currentWeekIndex - 1] : null;
  const nextWeek = currentWeekIndex < sortedWeeks.length - 1 ? sortedWeeks[currentWeekIndex + 1] : null;

  // Fetch the full entries for previous and next weeks
  const prevWeekEntry = prevWeek ? await getEntry("thisweek", prevWeek.slug) : null;
  const nextWeekEntry = nextWeek ? await getEntry("thisweek", nextWeek.slug) : null;

  return { prevWeek: prevWeekEntry, nextWeek: nextWeekEntry };
}

const { entry } = Astro.props;
const weeks = await getCollection("thisweek");
const { prevWeek, nextWeek } = await getNeighborWeeks(entry, weeks);
const { Content } = await entry.render();

const startDate = entry.data.startDate;
const endDate = entry.data.endDate;
const lastUpdated = entry.data.lastUpdated;

---

<BaseLayout pageTitle={"this week"}>
  <div class="font-code_mono text-sm bg-[rgba(220,204,204,0.4)] rounded-lg p-4 mb-4 shadow" >
    <h2>status</h2>
    <div class="grid grid-cols-[auto,1fr]">
      <div>
        <p>
          last updated: <span class="italic underline"
            >{
              new Date(lastUpdated).toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric",
                timeZone: 'UTC'
              })
            }</span
          >
        </p>
        <p>
          week: <span class="italic underline"
            >{
              new Date(startDate).toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric",
                timeZone: 'UTC'
              })
            }</span
          > to <span class="italic underline"
            >{
              new Date(endDate).toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric",
                timeZone: 'UTC'
              })
            }</span
          >
        </p>
      </div>
      <div class="flex flex-col items-end">
        <p>
          {
            nextWeek && Object.keys(nextWeek).length > 0 ? (
              <a
                href={`/thisweek/${nextWeek.slug}`}
                class="hover:underline"
              >
                &lt; next week
              </a>
            ) : (
              <span class="text-gray-400">&lt; next week</span>
            )
          }
        </p>
        <p>
          {
            prevWeek && Object.keys(prevWeek).length > 0 ? (
              <a
                href={`/thisweek/${prevWeek.slug}`}
                class="hover:underline"
              >
                prev week &gt;
              </a>
            ) : (
              <span class="text-gray-400">prev week &gt;</span>
            )
          }
        </p>
      </div>
    </div>
  </div>
  <div class="p-4">
    <article class="font-barlow prose">
      <Content />
    </article>
  </div>
</BaseLayout>
