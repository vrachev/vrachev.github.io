---
import BaseLayout from "@/src/layouts/BaseLayout.astro";
import "@/src/styles/global.css";
import { getEntry } from "astro:content";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const weeks = await getCollection("thisweek");
  return weeks.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

type Week = typeof Astro.props.entry;

async function getNeighborWeeks(week: Week) {
  const startPrevDate = new Date(week.data.startDate);
  startPrevDate.setDate(startPrevDate.getDate() - 7);
  const prevWeekYear = startPrevDate.getFullYear();
  
  const endNextDate = new Date(week.data.endDate);
  const nextWeekYear = endNextDate.getFullYear();
  
  // Return in format: "YYYY/MM-DD" to correctly match ID of posts.
  const startNext = `${nextWeekYear}/${endNextDate.toISOString().slice(5, 10)}`;
  const startPrev = `${prevWeekYear}/${startPrevDate.toISOString().slice(5, 10)}`;

  const nextWeek = await getEntry("thisweek", startNext);
  const prevWeek = await getEntry("thisweek", startPrev);

  console.log(`Next week: ${JSON.stringify(nextWeek, null, 2)}`);
  console.log(`Previous week: ${JSON.stringify(prevWeek, null, 2)}`);

  return {prevWeek, nextWeek};
}

const { entry } = Astro.props;
const { prevWeek, nextWeek} = await getNeighborWeeks(entry);
const { Content } = await entry.render();

const startDate = entry.data.startDate;
const endDate = entry.data.endDate;
const lastUpdated = entry.data.lastUpdated;
---

<BaseLayout pageTitle={`Week of ${startDate}`}>
  <div class="font-code_mono text-sm bg-[rgba(220,204,204,0.4)] rounded-lg p-4 mb-4 shadow" >
    <h2>status</h2>
    <div class="grid grid-cols-[auto,1fr]">
      <div>
        <p>
          last updated: <span class="italic underline"
            >{
              new Date(lastUpdated).toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric",
                timeZone: 'UTC'
              })
            }</span
          >
        </p>
        <p>
          week: <span class="italic underline"
            >{
              new Date(startDate).toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric",
                timeZone: 'UTC'
              })
            }</span
          > to <span class="italic underline"
            >{
              new Date(endDate).toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric",
                timeZone: 'UTC'
              })
            }</span
          >
        </p>
      </div>
      <div class="flex flex-col items-end">
        <p>
          {
            nextWeek && Object.keys(nextWeek).length > 0 ? (
              <a
                href={`/thisweek/${nextWeek.slug}`}
                class="hover:underline"
              >
                &lt; next week
              </a>
            ) : (
              <span class="text-gray-400">&lt; next week</span>
            )
          }
        </p>
        <p>
          {
            prevWeek && Object.keys(prevWeek).length > 0 ? (
              <a
                href={`/thisweek/${prevWeek.slug}`}
                class="hover:underline"
              >
                prev week &gt;
              </a>
            ) : (
              <span class="text-gray-400">prev week &gt;</span>
            )
          }
        </p>
      </div>
    </div>
  </div>
  <div class="p-4">
    <article class="prose">
      <Content />
    </article>
  </div>
</BaseLayout>
